open System

let sampleInput = "ULL
RRDDD
LURDL
UUUUD"

let puzzleInput = "LRULLRLDUUUDUDDDRLUDRDLDDLUUDLDDLRDRLDRLLURRULURLDRLDUDURLURRULLDDDUDDRRRDLRRDDLDURDULLRDLLLDRDLLDULDUDLLDLDRUDLLDLDDRRRDRLUDRDDLUDRRDUDUDLLDDUUDLRDUDRRUDUDRULRULUDRUUDLDLULLRLDLDDRULLRLLLULUULDURURLUUULDURLDDDURRUUDURDDDULDLURLRDRURDRUDRLLDLDRUURLLLRDRURUDLRLUDULLDDURLRURDLRDUUURRLULRRLDDULUUURLRRRLLLLLURDDRUULUDRRRUDDLLULRRUULDRDDULRLDDDRRUULUDRLRUDURUUULDLDULUUDURLLLRRDDRDLURDDDLDDDLRDRLDDURLRLLRUDRRLLDDDDDURDURRDDULDULLRULDRUURDRRDUDDUDDDDRRDULDUURDRUDRLDULRULURLLRRDRDRDLUUDRRLRLDULDDLUUUUUURRLRRRULLDDDRLRDRRRRRRRDUUDLLUDURUDDLURRUDL
UDUUURRLRLLDDRRDRRRLDDDLURURLLUDDRLUUDRRRDURRLLRURDLLRRDUUDDDDRDRURRLLLLURDLRRRULLLDLLLUDDLDRRRDLDUUDDRDUDDUURDDLULULDURDURDRUULURURRURDUURUDRRUDRLLLLRRDLLDRDDRLLURDDDUDUDUDRUURDDRUURDLRUUDDRDUURUDDLLUURDLUDRUUDRRDLLUUURDULUULDUUDLLULUUDLUDRUUDUUURLDDDRLRURDDULLRDRULULUDLUUDDDUUDLDUUDRULLDUURDDRUDURULDRDDLRUULRRRDLDLRDULRDDRLLRRLURDLDRUDLRLUDLRLDLDURRUULRLUURDULDRRULLRULRDLLDLDUDRUDDUDLDDURDDDRDLUDRULRUULLRURLDDDRDLRRDRULURULDULRDLDULDURDRDRDRDURDRLUURLRDDLDDRLDDRURLLLURURDULDUDDLLUURDUUUDRUDDRDLDRLRLDURRULDULUUDDLRULDLRRRRDLLDRUUDRLLDLUDUULRDRDLRUUDLRRDDLUULDUULRUDRURLDDDURLRRULURR
LDURLLLRLLLUURLLULDLRLLDLURULRULRDUDLDDUDRLRRDLULLDDULUUULDRLDURURLURLDLRUDULLLULDUURLLRDLUULRULLLULRDRULUDLUUULDDURLUDDUDDRDLDRDRUDLUURDDLULDUULURLUULRDRDLURUDRUDLDRLUUUUULUDUDRRURUDRULDLDRDRLRURUUDRDLULLUDLLRUUDUUDUDLLRRRLDUDDDRDUDLDLLULRDURULLLUDLLRUDDUUDRLDUULLDLUUDUULURURLLULDUULLDLUDUURLURDLUULRRLLRUDRDLLLRRRLDDLUULUURLLDRDLUUULLDUDLLLLURDULLRUDUUULLDLRLDRLLULDUDUDRULLRRLULURUURLRLURRLRRRDDRLUDULURUDRRDLUDDRRDRUDRUDLDDRLRDRRLDDRLLDDDULDLRLDURRRRRULRULLUUULUUUDRRDRDRLLURRRRUULUDDUDDDLDURDRLDLLLLLRDUDLRDRUULU
URURRUUULLLLUURDULULLDLLULRUURRDRRLUULRDDRUDRRDUURDUDRUDDRUULURULDRLDRDDDLDLRLUDDRURULRLRLLLDLRRUDLLLLRLULDLUUDUUDRDLRRULLRDRLRLUUDDRRLLDDRULLLRLLURDLRRRRRLLDDRRDLDULDULLDLULLURURRLULRLRLLLLURDDRDDDUUDRRRDUUDDLRDLDRRLLRURUDUUUDLDUULLLRLURULRULRDRLLLDLDLRDRDLLLRUURDDUDDLULRULDLRULUURLLLRRLLLLLLRUURRLULRUUUDLDUDLLRRDDRUUUURRRDRRDULRDUUDULRRRDUUUUURRDUURRRRLDUDDRURULDDURDDRDLLLRDDURUDLLRURLRRRUDDLULULDUULURLUULRDLRDUDDRUULLLRURLDLRRLUDLULDRLUDDDRURUULLDLRLLLDULUDDRLRULURLRDRRDDLDLURUDDUUURRDDLUDDRDUULRRDLDRLLLULLRULRURULRLULULRDUD
RUDLLUDRRDRRLRURRULRLRDUDLRRLRDDUDRDLRRLLRURRDDLRLLRRURULRUULDUDUULDULDLRLRDLRDLRUURLDRLUDRRDDDRDRRRDDLLLRRLULLRRDDUDULRDRDUURLDLRULULUDLLDRUDUURRUDLLRDRLRRUUUDLDUDRRULLDURRDUDDLRURDLDRLULDDURRLULLRDDDRLURLULDLRUDLURDURRUDULDUUDLLLDDDUUURRRDLLDURRDLULRULULLRDURULLURDRLLRUUDDRRUDRDRRRURUUDLDDRLDRURULDDLLULULURDLDLDULLRLRDLLUUDDUDUDDDDRURLUDUDDDRRUDDLUDULLRDLDLURDDUURDLRLUUDRRULLRDLDDDLDULDUDRDUUULULDULUDLULRLRUULLDURLDULDRDLLDULLLULRLRD"

let instructionLines (text: string) = List.ofArray (text.Split([| "\r\n" |], StringSplitOptions.None))

type Direction = Up | Right | Down | Left

type Keypad = One | Two | Three | Four | Five | Six | Seven | Eight | Nine

let parseDirection character =
  match character with
  | 'L' -> Left
  | 'R' -> Right
  | 'U' -> Up
  | 'D' -> Down
  | _ -> failwith (sprintf "Illegal direction %A" character)

let charactersToDirections characters =
  List.map parseDirection characters 

let allInstructions text =
  instructionLines text
    |> List.map (fun s -> s.ToCharArray() |> List.ofArray |> (List.map parseDirection))

let nextButton =
  function
  | (One, Up) | (One, Left) | (Two, Left) | (Four, Up) -> One
  | (One, Right) | (Three, Left) | (Two, Up) | (Five, Up) -> Two
  | (Three, Right) | (Three, Up) | (Two, Right) | (Six, Up) -> Three
  | (One, Down) | (Four, Left) | (Seven, Up) | (Five, Left) -> Four
  | (Four, Right) | (Six, Left) | (Two, Down) | (Eight, Up) -> Five
  | (Six, Right) | (Five, Right) | (Three, Down) | (Nine, Up) -> Six
  | (Seven, Left) | (Eight, Left) | (Four, Down) | (Seven, Down) -> Seven
  | (Eight, Down) | (Seven, Right) | (Nine, Left) | (Five, Down) -> Eight
  | (Nine, Right) | (Nine, Down) | (Six, Down) | (Eight, Right) -> Nine

let visitedButtons startPoint directions =
  let rec visitedButtonsHelper directions startPoint =
    match (directions, startPoint) with
    | ([], _) -> []
    | (direction::ds, startPoint) -> 
      let next = nextButton (startPoint, direction)
      next::(visitedButtonsHelper ds next)
  visitedButtonsHelper directions startPoint

let last list = List.head (List.rev list)

let code instructions =
  let rec codeHelper instructions visitedSoFar code =
    match (instructions, visitedSoFar, code) with
    | ([], _, _) ->  (List.rev visitedSoFar, List.rev code)
    | (x::xs, [], []) ->
      let buttons = visitedButtons Five x
      codeHelper xs [buttons] [(last buttons)]
    | (x::xs, visited, code) ->
      let buttons = visitedButtons (List.head code) x
      codeHelper xs (buttons::visited) ((last buttons)::code)
  codeHelper instructions [] []

let printKey =
  function
  | One -> '1' | Two -> '2' | Three -> '3'
  | Four -> '4' | Five -> '5' | Six -> '6'
  | Seven -> '7' | Eight -> '8' | Nine -> '9'

[<EntryPoint>]
let main argv = 
    let sampleInstructions = allInstructions sampleInput
    let puzzleInstructions = allInstructions puzzleInput
    printfn "%A" (snd (code sampleInstructions))
    printfn "%A" (snd (code puzzleInstructions))
    printfn "%A" (new String(Array.ofList (List.map (printKey) (snd (code puzzleInstructions)))))
    0
